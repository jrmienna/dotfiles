'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.fillOptions = fillOptions;
exports.split = split;
exports.getKeys = getKeys;
exports.readFile = readFile;
exports.writeFile = writeFile;
exports.deepGet = deepGet;
exports.deepNormalize = deepNormalize;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _stripBom = require('strip-bom');

var _stripBom2 = _interopRequireDefault(_stripBom);

var _writeFileAtomic = require('write-file-atomic');

var _writeFileAtomic2 = _interopRequireDefault(_writeFileAtomic);

var _stripJsonComments = require('strip-json-comments');

var _stripJsonComments2 = _interopRequireDefault(_stripJsonComments);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function fillOptions(given) {
  var options = {};

  options.noPrettyPrint = !!given.noPrettyPrint;
  options.failIfNonExistent = !!given.failIfNonExistent;

  return options;
}

function split(path) {
  return path.split('.').filter(function (i) {
    return i;
  });
}

function getKeys(path) {
  var chunks = split(path);
  var childKey = chunks.pop();
  var parentKey = chunks.join('.');
  return { childKey: childKey, parentKey: parentKey };
}

function readFile(filePath, defaultConfig) {
  var contents = (0, _stripJsonComments2.default)((0, _stripBom2.default)(_fs2.default.readFileSync(filePath, 'utf8')));
  try {
    return Object.assign(defaultConfig, JSON.parse(contents));
  } catch (_) {
    throw new Error('Invalid JSON found at \'' + filePath + '\'');
  }
}

function writeFile(filePath, contents, options) {
  var encoded = JSON.stringify(contents, null, options.noPrettyPrint ? 0 : 2);
  _writeFileAtomic2.default.sync(filePath, encoded + '\n');
}

function deepGet(object, chunks) {
  var position = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

  if (!chunks.length) {
    return object;
  }

  var current = object[chunks[position]];
  if (chunks.length === position + 1) {
    return current;
  }
  if ((typeof current === 'undefined' ? 'undefined' : _typeof(current)) !== 'object' || !current) {
    var error = new Error('Invalid access of \'' + chunks.join('.') + '\' when \'' + chunks.slice(0, position).join('.') + '\' is ' + (typeof current === 'undefined' ? 'undefined' : _typeof(current)));
    // $FlowIgnore: Custom prop
    error.code = 'CONFIG_INVALID_ACCESS';
    throw error;
  }
  return deepGet(current, chunks, position + 1);
}

function deepNormalize(object, chunks, strict) {
  var position = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

  if (!chunks.length) {
    return object;
  }

  var current = object[chunks[position]];

  if (typeof current === 'undefined') {
    // eslint-disable-next-line no-param-reassign
    current = object[chunks[position]] = {};
  }
  if ((typeof current === 'undefined' ? 'undefined' : _typeof(current)) !== 'object' || !current) {
    if (strict) {
      var error = new Error('Invalid access of \'' + chunks.join('.') + '\' when \'' + chunks.slice(0, position).join('.') + '\' is ' + (typeof current === 'undefined' ? 'undefined' : _typeof(current)));
      // $FlowIgnore: Custom prop
      error.code = 'CONFIG_INVALID_ACCESS';
      throw error;
    } else {
      // eslint-disable-next-line no-param-reassign
      current = object[chunks[position]] = {};
    }
  }
  if (chunks.length === position + 1) {
    return current;
  }
  return deepNormalize(current, chunks, strict, position + 1);
}