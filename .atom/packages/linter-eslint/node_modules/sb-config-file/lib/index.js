'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _helpers = require('./helpers');

var Helpers = _interopRequireWildcard(_helpers);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ConfigFile = function () {
  function ConfigFile(filePath) {
    var defaultConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    _classCallCheck(this, ConfigFile);

    this.options = Helpers.fillOptions(options);
    this.filePath = filePath;
    this.defaultConfig = defaultConfig;

    try {
      // To verify file doesn't have syntax errors
      Helpers.readFile(filePath, this.defaultConfig);
    } catch (error) {
      if (error.code === 'ENOENT') {
        if (this.options.failIfNonExistent) {
          var newError = new Error('Config file \'' + filePath + '\' does not exist');
          // $FlowIgnore: Custom prop
          newError.code = 'CONFIG_INVALID_ACCESS';
          throw newError;
        }
        Helpers.writeFile(filePath, defaultConfig, this.options);
      } else throw error;
    }
  }

  _createClass(ConfigFile, [{
    key: 'get',
    value: function get() {
      var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var strict = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      var contents = Helpers.readFile(this.filePath, this.defaultConfig);
      try {
        var value = Helpers.deepGet(contents, Helpers.split(key));
        if (typeof value === 'undefined') {
          return defaultValue;
        }
        return value;
      } catch (error) {
        if (error.code !== 'CONFIG_INVALID_ACCESS' || strict) {
          throw error;
        }
        return null;
      }
    }
  }, {
    key: 'set',
    value: function set(key, value) {
      var strict = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      var contents = Helpers.readFile(this.filePath, this.defaultConfig);

      var _Helpers$getKeys = Helpers.getKeys(key),
          childKey = _Helpers$getKeys.childKey,
          parentKey = _Helpers$getKeys.parentKey;

      var parent = Helpers.deepNormalize(contents, Helpers.split(parentKey), strict);
      if (Array.isArray(parent)) {
        var index = parseInt(childKey, 10);
        if (index !== index) {
          throw new Error('Invalid write of non-numeric key on Array at \'' + key + '\'');
        }
        parent[index] = value;
      } else {
        parent[childKey] = value;
      }
      Helpers.writeFile(this.filePath, contents, this.options);
    }
  }, {
    key: 'delete',
    value: function _delete(key) {
      var strict = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      var contents = Helpers.readFile(this.filePath, this.defaultConfig);

      var _Helpers$getKeys2 = Helpers.getKeys(key),
          childKey = _Helpers$getKeys2.childKey,
          parentKey = _Helpers$getKeys2.parentKey;

      var parent = Helpers.deepNormalize(contents, Helpers.split(parentKey), strict);
      delete parent[childKey];
      Helpers.writeFile(this.filePath, contents, this.options);
    }
  }, {
    key: 'append',
    value: function append(key, value) {
      var strict = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      var contents = Helpers.readFile(this.filePath, this.defaultConfig);
      var parent = Helpers.deepNormalize(contents, Helpers.split(key), strict);
      if (!Array.isArray(parent)) {
        var error = new Error('Invalid write of \'' + key + '\' when it\'s not an Array');
        // $FlowIgnore: Custom prop
        error.code = 'CONFIG_INVALID_ACCESS';
        throw error;
      }
      parent.push(value);
      Helpers.writeFile(this.filePath, contents, this.options);
    }
  }]);

  return ConfigFile;
}();

module.exports = ConfigFile;